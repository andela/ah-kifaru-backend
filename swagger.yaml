openapi: 3.0.0

info:
  version: '1.0'
  title: ErrorSwag
  description: 'Create a community of like minded authors to foster inspiration and innovation by leveraging the modern web.'

servers:
  - url: http://localhost:3000/api/v1

tags:
  - name: 'welcome'
    description: 'API for quick api welcome test'
  - name: 'auth'
    description: 'API for login, signup and account verification'
  - name: 'users'
    description: 'API for users'
  - name: 'articles'
    description: 'API for articles' 
  - name : ratings
    description: 'API for ratings of Articles'
  - name: 'search'
    description: 'API for search'

paths:
  /:
    get:
      tags:
        - welcome
      summary: Test get request
      responses:
        '200':
          description: Successfull
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
  /auth/login:
    post:
      tags:
        - 'auth'
      summary: 'Logs user into the system'
      description: ''
      operationId: 'loginUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'query'
          name: 'email'
          schema:
            type: 'string'
            required: true
          description: The user's email for login
        - in: 'query'
          name: 'password'
          schema:
            type: 'string'
            required: true
          description: The password for login in clear text
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
        401:
          description: 'failed operation'
  /auth/signup:
    post:
      tags:
        - 'auth'
      summary: 'Create a new user into the system'
      description: ''
      operationId: 'signupUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'query'
          name: 'email'
          description: "The user's email for signup"
          schema:
            type: 'string'
            required: true
        - in: 'query'
          name: 'username'
          schema:
            type: 'string'
            required: true
          description: 'The username for signup'
        - in: 'query'
          name: 'password'
          description: 'The password for signup in clear text'
          schema:
            type: 'string'
            required: true
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
        400:
          description: 'failed operation'
  /auth/verify/{token}:
    patch:
      tags:
        - 'auth'
      summary: "Verifies a user's account"
      description: ''
      operationId: 'verifyUser'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: 'path'
          name: 'token'
          description: 'The token sent to the users email.'
          schema:
            type: 'string'
            required: true
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
        400:
          description: "failed operation"
  /users:
    get: 
      tags: 
        - "users"
      summary : List All Users
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The current page
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        400:              
          description: 'failed operation'
  /user/unfollow:
    patch:
      tags:
        - 'users'
      summary: 'Unfollow users on errorSwag'
      description: 'Id of the user to unfollow'
      operationId: 'followUser'
      produces:
        - 'application/xml'
        - 'application/json'
    parameters:
      - name: 'followeeId'
        in: 'body'
        description: 'Id of the user to unfollow'
        schema:
          type: 'number'
          required: true
    responses:
      200:
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/response'
    400:
      description: 'Invalid user id'
  /user/follow:
    patch:
      tags:
        - 'users'
      summary: 'Follow other users on errorSwag'
      description: 'Id of the user to follow should be presented as a request body'
      operationId: 'followUser'
      produces:
        - 'application/xml'
        - 'application/json'
    parameters:
      - name: 'followeeId'
        in: 'body'
        description: 'Id of the user to follow'
        schema:
          type: 'number'
          required: true
    responses:
      200:
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/response'
    400:
      description: 'Invalid user id'
  /users/followers:
    get:
      tags:
        - 'followers'
      summary: 'Get all users that follow this user'
      description: 'Returns all the followers of this user'
      operationId: 'get all followers'
      produces:
        - 'application/xml'
        - 'application/json'
      parameters: []
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/response'
        400:
          description: 'failed operation'
  /user/bookmark:
    patch:
      tags:
        - 'bookmark'
      summary: 'Bookmark articles on errorswag'
      description: 'Id of the article to be bookmarked should be presented as a request body'
      operationId: 'bookmark Article'
      produces:
        - 'application/xml'
        - 'application/json'
    parameters:
      - name: 'articleId'
        in: 'body'
        description: 'Id of the article to be bookmarked'
        schema:
          type: 'number'
          required: true
    responses:
      200:
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/response'
    400:
      description: 'Invalid article id'
  /user/unbookmark:
    patch:
      tags:
        - 'bookmark'
      summary: 'Unbookmark articles on errorSwag'
      description: 'Id of the article to be unbookmarked should be presented as a request body'
      operationId: 'articeId'
      produces:
        - 'application/xml'
        - 'application/json'
    parameters:
      - name: 'articleId'
        in: 'body'
        description: 'Id of the article to unbookmark'
        schema:
          type: 'number'
          required: true
    responses:
      200:
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/response'
    400:
      description: 'Invalid user id'

  /articles:
    get: 
      tags: 
        - 'articles'
      summary : List All Articles
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The current page
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: 'Successfull'
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/response"      
        400:          
          description: 'failed operation'  
    post:
      tags:
        - 'Articles'
      summary: Create an article on errorswag
      description: Create an article
      operationId: CreateArticle
      parameters:
        - in: body
          name: body
          description: Information to be sent to create an article
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - body
              - image
            properties:
              title:
                type: string
              description:
                type: string
              body:
                type: string
              image:
                type: string
      responses:
        '201':
          description: Article successfully created
        '400':
          description: Bad request
        '401':
          description: Not authorized to create an article
        '500':
          description: Server error
      security:
        - api_key: []
  '/articles/:articleId':
    get:
      tags:
        - 'Articles'
      summary: Get articles
      description: Get articles
      operationId: GetArticle
      produces:
        - application/json
      parameters:
        - in: path
          name: articleId
          required: true
          type: number
      responses:
        '200':
          description: Article successfully fetched
        '404':
          description: Article not found
        '500':
          description: Server error
    delete:
      tags:
        - 'Articles'
      summary: Delete article
      description: Delete article
      operationId: DeleteArticle
      produces:
        - application/json
      parameters:
        - in: path
          name: articleId
          required: true
          type: number
      responses:
        '200':
          description: Article successfully deleted
        '401':
          description: Not authorized to delete article
        '404':
          description: Article not found
        '500':
          description: Server error
      security:
        - api_key: []
    put:
      tags:
        - 'Articles'
      summary: Update an article
      description: Update an article
      operationId: UpdateArticle
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: articleId
          required: true
          type: number
        - in: body
          name: body
          description: Information to be sent to create an article
          required: true
          schema:
            type: object
            required:
              - title
              - description
              - body
            properties:
              title:
                type: string
              description:
                type: string
              body:
                type: string
      responses:
        '200':
          description: Article successfully updated
        '400':
          description: Bad request
        '401':
          description: Not authorized to update an article
        '500':
          description: Server error
      security:
        - api_key: []
  /articles/{articleId}/ratings:
    patch: 
      tags: 
        - ratings
      summary : Rating of Articles
      description: ""
      operationId: "ratingArticles"
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          required: true
          description: token of user
        - in: path
          name: articleId
          schema:
            type: integer
          required: true
          description: articles Id for article been rated
        - in: body
          name: ratings
          schema:
            type: integer
          required: true
          description: ratings for the article
      responses:
        200:
          description: Successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/goodResponse"    
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
          description: 'failed operation'
  /notifications:
    get: 
      tags: 
        - "users"
      summary : List All User Notifications
      parameters:
        - in: header
          name: x-access-header
          required: true
          schema:
            type: string
          description: Users token
      responses:
        200:
          description: 'successful operation'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/response"
        403:              
          description: 'Restricted Access'
          schema:
            $ref: '#/components/schema/badResponse'
        500:              
          description: 'server error
          schema:
            $ref: '#/components/schema/badResponse'
  /notifications/opt:
    patch: 
      tags: 
        - users
      summary : Opt in and out of email notifications
      description: ""
      operationId: "optEmailNotifications"
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          required: true
          description: token of user
        - in: body
          name: emailNotify
          schema:
            type: boolean
          required: true
          description: state of email notification
      responses:
        200:
          description: Successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/goodResponse"    
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
          description: 'failed operation'
  /notifications/{notificationId}:
    patch: 
      tags: 
        - users
      summary : mark notifications as read
      description: ""
      operationId: "markNotification"
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          required: true
          description: token of user
        - in: path
          name: notificationId
          schema:
            type: integer
          required: true
          description: the id of the notification to be marked as read
      responses:
        200:
          description: Successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/goodResponse"    
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
          description: 'failed operation'

  /articles/publish:
    put: 
      tags: 
        - articles
      summary : Publish an Article
      description: ""
      operationId: "publishArticle"
      produces:
        - 'application/xml'
        - 'application/json'
      parameters:
        - in: header
          name: x-access-token
          schema:
            type: string
          required: true
          description: token of user
        - in: query
          name: articleId
          schema:
            type: integer
          description: articles Id for article been published
        - in: body
          name: title
          schema:
            type: string
          required: true
          description: title of the article
        - in: body
          name: body
          schema:
            type: string
          required: true
          description: body of the article
        - in: body
          name: description
          schema:
            type: string
          required: true
          description: description for the article
        - in: body
          name: image
          schema:
            type: string
          required: true
          description: url of the image for the article
        - in: body
          name: tag
          schema:
            type: string
          description: string list of tags seperated by spaces
      responses:
        200:
          description: Successfull
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/goodResponse"    
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
        500:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/badResponse" 
              description: 'failed operation'
  /search:
    get: 
      tags: 
        - 'search'
      summary : Do all searches
      parameters:
        - in: query
          name: search
          required: false
          schema:
            type: string
          allowReserved: false 
      responses:
        200:
          description: 'Successfull'
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/response"      
        400:          
          description: 'failed operation'
  /articles/popular:
    patch:
      tags:
        - 'popular articles'
      summary: 'Fetch articles by populairty and number of reviewers'
      description: 'Most popular articles on error swag are displayed in descending order'
      produces:
        - 'application/xml'
        - 'application/json'
    responses:
      200:
        description: 'successful operation'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/response'
    404:
      description: 'No available articles on errorswad'


  /tags:
    get: 
      tags: 
        - 'Tags'
      summary : Fetch All Tags
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The current page
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: 'Successfull'
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/response"      
        400:          
          description: 'failed operation'  
    post:
      tags:
        - 'Tags'
      summary: Create an tags on errorswag
      description: Create a tag
      operationId: createTag
      parameters:
        - in: body
          name: body
          description: Information to be sent to create an article
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              title:
                type: string
      responses:
        '201':
          description: ag has been created
        '200':
          description: Tag exists
        '401':
          description: Not authorized to create a tag
        '500':
          description: Server error
      security:
        - api_key: []
  /:id/delete:
    delete:
      tags:
        - 'Tags'
      summary: Delete tags
      description: Delete tags
      operationId: DeleteTags
      produces:
        - application/json
      parameters:
        - in: path
          name: tagId
          required: true
          type: number
      responses:
        '200':
          description: Tag successfully deleted
        '500':
          description: Server error
      security:
        - api_key: []

  /tags:
    get: 
      tags: 
        - 'Tags'
      summary : Fetch All Tags
      parameters:
        - in: query
          name: page
          schema:
            type: integer
          description: The current page
        - in: query
          name: limit
          schema:
            type: integer
          description: The numbers of items to return
      responses:
        200:
          description: 'Successfull'
          content:
              application/json:
                schema:
                  $ref: "#/components/schemas/response"      
        400:          
          description: 'failed operation'  
    post:
      tags:
        - 'Tags'
      summary: Create an tags on errorswag
      description: Create a tag
      operationId: createTag
      parameters:
        - in: body
          name: body
          description: Information to be sent to create an article
          required: true
          schema:
            type: object
            required:
              - name
            properties:
              title:
                type: string
      responses:
        '201':
          description: ag has been created
        '200':
          description: Tag exists
        '401':
          description: Not authorized to create a tag
        '500':
          description: Server error
      security:
        - api_key: []
  /:id/delete:
    delete:
      tags:
        - 'Tags'
      summary: Delete tags
      description: Delete tags
      operationId: DeleteTags
      produces:
        - application/json
      parameters:
        - in: path
          name: tagId
          required: true
          type: number
      responses:
        '200':
          description: Tag successfully deleted
        '500':
          description: Server error
      security:
        - api_key: []

  "/api/v1/articles/{articleId}/report":
  post:
    tags:
    - Articles
    summary: Route for authenticated users to report articles
    description: Returns a message on the status of the case
    parameters:
    - in: body
      name: body
      description: object containing the violation details of the article
      required: true
      schema:
        "$ref": "#/definitions/report"
    - in: path
      name: articleId
      description: The id for the article to be reported
      required: true
    - in: header
      name: authorization
      description: user token
      required: true
    responses:
      '201':
        description: article successfully reported
        schema:
          "$ref": "#/definitions/reportRes1"
      '401':
        description: User access required
      '409':
        description: article has been reported by authenticated user before
        schema:
          "$ref": "#/definitions/reportRes2"
/api/v1/articles/:articleId/comments/like:
  post:
    tags:
    - Like
    summary: Route for authenticated users to like or remove reaction of comments
      on an article
    description: Returns a confirmation is like or remove reaction is successful
    parameters:
    - in: params
      name: commentId
      description: the id of the comment to be liked
      required: true
    responses:
      '200':
        description: Returns a 200 when like is toggled based on yours like/reset
          the action
      '201':
        description: Returns a 201 status code on the first like
      '400':
        description: Returns a 400 if params is not valid
      '401':
        description: User access required
      '500':
        description: Returns a 500 if comment no longer exists
components:
  schemas:
    response:
      type: object
      properties:
        data:
          type: string
    goodResponse:
      type: object
      properties:
        data:
          type: object
    badResponse:
      type: object
      properties:
        message:
          type: string
          type: string

  /articles/{articleId}/comments:
    post:
      tags:
      - Articles
      summary: POST API endpoint for creating comment on an article
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: slug
        in: path
        description: slug of the article to be commented on
        required: true
        type: string
      - name: content
        in: formData
        description: content of the comment
        required: true
        type: string
      responses:
        '201':
          description: successful operation
        '401':
          description: Not authorized
        '403':
          description: invalid token supplied
        '404':
          description: No user found
        '500':
          description: Auth token expired
      security:
      - JWT: []
    get:
      tags:
      - Articles
      summary: GET API endpoint for getting all comment on an article
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: slug
        in: path
        description: slug of the article to view all comments
        required: true
        type: string
      responses:
        '200':
          description: successful operation
        '400':
          description: article not found
      security:
      - JWT: []
        "/articles/comments/{id}":
    patch:
      tags:
      - Articles
      summary: PUT API endpoint for updating a single comment
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: id
        in: path
        description: id of comment
        required: true
        type: integer
      - name: commentBody
        in: formData
        description: body of the comment
        required: true
        type: string
      responses:
        '201':
          description: successful operation
        '401':
          description: Not authorized
        '403':
          description: Auth token not supplied
        '404':
          description: No user found
        '500':
          description: Auth token expired
      security:
      - JWT: []

        "/articles/comments/{id}":
    delete:
      tags:
      - Articles
      summary: PATCH API endpoint for deleting an end point
      produces:
      - application/json
      consumes:
      - application/x-www-form-urlencoded
      parameters:
      - name: id
        in: path
        description: id of comment
        required: true
        type: integer
      - name: commentBody
        in: formData
        description: body of the comment
        required: true
        type: string
      responses:
        '201':
          description: successful operation
        '401':
          description: Not authorized
        '403':
          description: Auth token not supplied
        '404':
          description: No user found
        '500':
          description: Auth token expired
      security:
      - JWT: []
